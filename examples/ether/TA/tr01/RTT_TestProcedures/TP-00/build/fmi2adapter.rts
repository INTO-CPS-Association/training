#line 1 "C:/INTO-CPS/INTO_CPS_Pilot_Studies/case-study_ether/Test-Data-Generation/Ether_Indirect_Test_Model_v0.41/specs/fmi2adapter.rts"
// -*- mode: c; c-basic-offset: 4; -*-

// --------------------------------------------------
// This template is part of RTT-MBT (FMI extension)
// Verified Systems International GmbH 
// www.verified.de
// --------------------------------------------------

#include "fmi2Interface.h"
#include "fmi2SharedMemory.h"
#include "fmi2rttInterface.h"

#include "fmi2Interface.c"
#include "fmi2SharedMemory.c"

#ifdef __MACH__
// Workaround to always include the missing library when compiling this file on MaxOSX.
#include "sem_timedwait.c"
#endif

extern rttModelVars_t     *rttStatePre;
extern rttModelVars_t     *rttStatePost;

extern rttInterface_t     *rttIOPre;
extern rttInterface_t     *rttIOPost;

fmi2SharedMemory_t        *fmi2shm;
fmi2InterfaceMapping_t    fmi2ifmap;

sem_t *rttWaitSem;  /**< Increased by FMI library, waited on by RT-Tester process. */
sem_t *fmi2WaitSem; /**< Increased by RT-Tester process, waited on by FMI library. */

static uint64_t fmi2_timetick_current;

static fmi2Real fmi2_default_max_step_size = 1.000;

int fmi2_gettimeofday(struct timeval *tv, struct timezone *tz) {
    tv->tv_usec = (fmi2_timetick_current % 1000) * 1000;
    tv->tv_sec =  fmi2_timetick_current / 1000;
    return 0;
}

@func void fmi_timetick_INIT() {
    fmi2_timetick_current = 0;
    rttIOPre = (rttInterface_t *) calloc(1, sizeof(rttInterface_t));
    rttIOPost = (rttInterface_t *) calloc(1, sizeof(rttInterface_t));
    rttStatePre = (rttModelVars_t *) calloc(1, sizeof(rttModelVars_t));
    rttStatePost = (rttModelVars_t *) calloc(1, sizeof(rttModelVars_t));
    
    fmi2shm = fmi2SharedMemoryAttach(FMI2_MODEL_GUID, &rttWaitSem, &fmi2WaitSem);
    fmi2InterfaceInitMapping(&fmi2ifmap, &fmi2shm->variables);

    RTTgs.fmi2_tags_output_stream = fopen("../testdata/testcase_tags.txt", "w+b");
    if(NULL == RTTgs.fmi2_tags_output_stream){
	@rttCheck(NULL != RTTgs.fmi2_tags_output_stream, "unable to open 'testcase_tags.txt', write to <stderr>\n"); 
	RTTgs.fmi2_tags_output_stream = stderr;
    }

#ifdef    RTT_FMI_DEFAULT_GET_MAX_STEP_SIZE
    fmi2_default_max_step_size = RTT_FMI_DEFAULT_GET_MAX_STEP_SIZE;
#else
    if(RTTgs.timers_in_microseconds){
        fmi2_default_max_step_size = 0.001;
    }
    else {
        fmi2_default_max_step_size = 0.1;
    }
#endif /* RTT_FMI_DEFAULT_GET_MAX_STEP_SIZE */
    @printf("Using fmi2_default_max_step_size = %f", fmi2_default_max_step_size);
}

@func void fmi_timetick_FINIT() {
    if (fmi2shm != NULL) {
        fmi2shm->terminated = fmi2True;
	if(RTTgs.fmi2_tags_output_stream != stderr){
	    rttstr_line_buffer_t* tags;
   	    char* line;
	    @rttYield; // allow all other AMs to write their contents
	    fflush(RTTgs.fmi2_tags_output_stream);
	    rewind(RTTgs.fmi2_tags_output_stream);
	    tags = rttstr_map_file_to_line_buffer(RTTgs.fmi2_tags_output_stream);
	    @printf("BEGIN: RTT_TESTCASE_TRACING FOR [%s]", RTTgs.testproc_name);
	    while(NULL != (line = rttstr_line_buffer_get_line(tags))){
		@printf("%s", line);
	    }
	    @printf("END: RTT_TESTCASE_TRACING FOR [%s]", RTTgs.testproc_name);
	    
	}
        wakeup(fmi2WaitSem);
        fmi2SharedMemoryDetach(fmi2shm, rttWaitSem, fmi2WaitSem);
    }
}

@func void fmi_timetick_PROCESS() {
    int                 _timeTickOld = @t;
    
    // Consistency checks:
    if (fmi2shm == NULL) {
        @rttSetVerdict(INCONC, "Cannot connect to shared memory of FMU. Aborting test.");
        @rttStopTest;
    }

    @printf("FMU Model Name: %s", fmi2shm->fmuModelName);
    @rttCheck(strncmp(fmi2shm->fmuModelName, FMI2_MODEL_NAME, 128) == 0, "Model name mismatch.");
    @printf("FMU Model Guid: %s", fmi2shm->fmuGuid);
    @rttCheck(strncmp(fmi2shm->fmuGuid, FMI2_MODEL_GUID, 128) == 0, "Model GUID mismatch.");
    
    // Enter testing loop
    while (@rttIsRunning) {
        // Wait until we are woken up
        int waitResult = 0;
        do {
            waitResult = waitFor(rttWaitSem, 500);

            // Do we have to terminate?
            if (fmi2shm->terminateTest != 0) {
                @printf("Terminating test as requested by FMU.");
                @rttStopTest;
            } else if (waitResult < 0) {
                @printf("Semaphore failure: terminating test.");
                @rttStopTest;
            }
        } while (waitResult != 0);

        // Give a hint that we have started processing here.
        fmi2shm->stepResult = fmi2Pending;
        
        // OK. Now lets collect first the time information
        fmi2Real startTick = fmi2shm->currentTimeStamp;
        fmi2Real stepSize = fmi2shm->stepSize;
        uint64_t currentTick = (uint64_t)((startTick)*1000.0+0.5);
        uint64_t endTick = (uint64_t)((startTick + stepSize) * 1000.0 + 0.5);

        rttTimeTic_t min_stat_wakeup;
        int idx;

        // copy FMI input data into rttIOPost/rttStatePost, which will
        // become rttIOPre/rttStatePre soon.
        fmi2_timetick_current = currentTick;
        fmi2rttInterface(&fmi2shm->variables, rttIOPost, rttStatePost);
        
        do {
            // Update the global clock to the new time tick and let the test run.
            fmi2_timetick_current = currentTick;

            // Execute the regular test until we have reached a stable state:
            do {
                // Reset flag indicating whether a discrete transition took place in the last cycle
                rttHaveDiscreteTrans = 0;
                // Copy post state to actual pre-state
                memcpy(rttIOPre, rttIOPost, sizeof(rttInterface_t));
                memcpy(rttStatePre, rttStatePost, sizeof(rttModelVars_t));
                
                _timeTick = @t;
                _timeTickDiff = _timeTick - _timeTickOld;
                _timeTickOld = _timeTick;
                @rttYield;
            } while (rttHaveDiscreteTrans != 0);
            
            // We are stable for now, update rtt_fmi2_currentMaxStepSize
            // MIN_amID({ AM_context[amId].run_stat_wakeup | AM_context[amId].run_stat_wakeup > 0 })
            min_stat_wakeup = (long long unsigned)-1;
            for(idx = 0; idx < RTT_CONFIG_NUM_AM; idx++){
                if(@amId == idx){
                    continue;
                }
                else if((AM_context[idx].run_stat_wakeup > 0) &&
                            (AM_context[idx].run_stat_wakeup < min_stat_wakeup)){
                    min_stat_wakeup = AM_context[idx].run_stat_wakeup;
                }
            }
            // store in shared memory, so fmi2GetMaxStepSize() can use it
            if(min_stat_wakeup != (long long unsigned)-1){
                fmi2shm->currentMaxStepSize = 
                    (fmi2Real)(min_stat_wakeup - @t) 
                    / (fmi2Real)(RTTgs.timers_in_microseconds  
                                 ? 1000000.0
                                 : 1000.0)
                    ;

                // Advance time by maximal allowed value
                currentTick += (min_stat_wakeup - @t);
                if(currentTick > endTick){
                    currentTick = endTick;
                }
            }
            else {

                fmi2shm->currentMaxStepSize = fmi2_default_max_step_size;
                // Advance time minimally
                currentTick++;
            }
        } while (currentTick < endTick);
        
        // Finally copy all results from rttIOPost into the shared memory to FMI library.
        rtt2fmiInterface(&fmi2shm->variables, rttIOPost, rttStatePost);

        // Signal completion for this stepSize and yield to FMI library.
        fmi2shm->stepResult = fmi2OK;
        if (wakeup(fmi2WaitSem) != 0) { 
            @printf("Semaphore failure: cannot wakeup FMI library.");
            @rttStopTest;
        }
    }
}

